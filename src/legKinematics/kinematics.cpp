//
// Created by shuoy on 8/10/21.
//

#include "kinematics.h"

Eigen::Vector3d Kinematics::fk(Eigen::Vector3d q, Eigen::VectorXd rho_opt, Eigen::VectorXd rho_fix)
{
    Eigen::Vector3d out;
    autoFunc_fk_pf_pos(q.data(), rho_opt.data(), rho_fix.data(), out.data());
    return out;
}

Eigen::Matrix3d Kinematics::jac(Eigen::Vector3d q, Eigen::VectorXd rho_opt, Eigen::VectorXd rho_fix)
{
    Eigen::Matrix3d mtx;
    autoFunc_d_fk_dt(q.data(), rho_opt.data(), rho_fix.data(), mtx.data());
    return mtx;
}

// functions generated by matlab
void Kinematics::autoFunc_fk_pf_pos(const double in1[3], const double in2[RHO_OPT_SIZE], const double in3[RHO_FIX_SIZE], double p_bf[3])
{
    double l1,l2,l3,hx,hy,q1,q2,q3;
    hx = in3[0];
    hy = in3[1];
    l1 = in3[2];
    l2 = in3[3];
    l3 = in3[3];
    q1 = in1[0];
    q2 = in1[1];
    q3 = in1[2];

    p_bf[0] = -l2*std::sin(q2)-l3*std::sin(q2+q3)+hx;
    p_bf[1] = l1*std::cos(q1)+l3*std::sin(q1)*std::cos(q2+q3)+l2*std::cos(q2)*std::sin(q1)+hy;
    p_bf[2] = l1*std::sin(q1)-l3*std::cos(q1)*std::cos(q2+q3)-l2*std::cos(q1)*std::cos(q2);

    // double p_bf_tmp;
    // double t2;
    // double t3;
    // double t4;
    // double t5;
    // double t6;
    // double t7;
    // double t8;
    // double t9;

    // //     This function was generated by the Symbolic Math Toolbox version 8.6.
    // //     10-Aug-2021 14:48:21
    // t2 = std::cos(in1[0]);
    // t3 = std::cos(in1[1]);
    // t4 = std::cos(in1[2]);
    // t5 = std::sin(in1[0]);
    // t6 = std::sin(in1[1]);
    // t7 = std::sin(in1[2]);
    // t8 = in1[1] + in1[2];
    // t9 = std::sin(t8);
    // p_bf[0] = (((in3[0] + in2[2] * t9) - in3[4] * t9) - t6 * in3[3]) + in2[0] *
    //                                                                    std::cos(t8);
    // p_bf[1] = ((((((((in3[1] + in2[1] * t2) + in3[2] * t2) + t3 * t5 * in3[3]) +
    //                in2[0] * t3 * t5 * t7) + in2[0] * t4 * t5 * t6) - in2[2] * t3 *
    //                                                                  t4 * t5) + in2[2] * t5 * t6 * t7) + in3[4] * t3 * t4 * t5) - in3
    //                                                                                                                               [4] * t5 * t6 * t7;
    // t8 = in2[0] * t2;
    // t9 = in2[2] * t2;
    // p_bf_tmp = in3[4] * t2;
    // p_bf[2] = (((((((in2[1] * t5 + in3[2] * t5) - t2 * t3 * in3[3]) - t8 * t3 * t7)
    //               - t8 * t4 * t6) + t9 * t3 * t4) - t9 * t6 * t7) - p_bf_tmp * t3 *
    //                                                                 t4) + p_bf_tmp * t6 * t7;
}

void Kinematics::autoFunc_d_fk_dt(const double in1[3], const double in2[RHO_OPT_SIZE], const double in3[RHO_FIX_SIZE], double jacobian[9])
{
    // double lc = in2[0];
    // double jacobian_tmp;
    // double t10;
    // double t11;
    // double t16;
    // double t18;
    // double t5;
    // double t6;
    // double t7;
    // double t8;
    // double t9;
    // //     This function was generated by the Symbolic Math Toolbox version 8.7.
    // //     19-Jan-2022 15:23:15
    // t5 = std::cos(in1[0]);
    // t6 = std::cos(in1[1]);
    // t7 = std::cos(in1[2]);
    // t8 = std::sin(in1[0]);
    // t9 = std::sin(in1[1]);
    // t10 = std::sin(in1[2]);
    // t11 = in1[1] + in1[2];
    // t16 = lc * std::sin(t11);
    // t11 = -(lc * std::cos(t11));
    // t18 = in3[3] * t9 + t16;
    // jacobian[0] = 0.0;
    // jacobian_tmp = lc * t5;
    // jacobian[1] = ((-in3[2] * t8 + in3[3] * t5 * t6) + jacobian_tmp * t6 * t7) -
    //               jacobian_tmp * t9 * t10;
    // jacobian_tmp = in3[3] * t6;
    // jacobian[2] = ((in3[2] * t5 + jacobian_tmp * t8) + lc * t6 * t7 * t8) -
    //               lc * t8 * t9 * t10;
    // jacobian[3] = t11 - jacobian_tmp;
    // jacobian[4] = -t8 * t18;
    // jacobian[5] = t5 * t18;
    // jacobian[6] = t11;
    // jacobian[7] = -t8 * t16;
    // jacobian[8] = t5 * t16;

    // double l1,l2,l3,hx,hy,q1,q2,q3;
    // hx = in3[0];
    // hy = in3[1];
    // l1 = in3[2];
    // l2 = in3[3];
    // l3 = in3[3];
    // q1 = in1[0];
    // q2 = in1[1];
    // q3 = in1[2];

    // jacobian[0] = 0.0;
    // jacobian[1] = -l2*std::cos(q2)-l3*std::cos(q2+q3);
    // jacobian[2] = -l3*std::cos(q2+q3);
    // jacobian[3] = -l1*std::sin(q1)+l3*std::cos(q1)*std::cos(q2+q3)+l2*std::cos(q2)*std::cos(q1);
    // jacobian[4] = -l3*std::sin(q1)*std::sin(q2+q3)-l2*std::sin(q2)*std::sin(q1);
    // jacobian[5] = -l3*std::sin(q1)*std::sin(q2+q3);
    // jacobian[6] = l1*std::cos(q1)+l3*std::sin(q1)*std::cos(q2+q3)+l2*std::sin(q1)*std::cos(q2);
    // jacobian[7] = l3*std::cos(q1)*std::sin(q2+q3)+l2*std::cos(q1)*std::sin(q2);
    // jacobian[8] = l3*std::cos(q1)*std::sin(q2+q3);

    double b_jacobian_tmp;
    double c_jacobian_tmp;
    double jacobian_tmp;
    double t12;
    double t16;
    double t17;
    double t2;
    double t22;
    double t3;
    double t4;
    double t5;
    double t6;
    double t7;
    double t8;
    double t9;

    //     This function was generated by the Symbolic Math Toolbox version 8.6.
    //     10-Aug-2021 14:48:21
    t2 = std::cos(in1[0]);
    t3 = std::cos(in1[1]);
    t4 = std::cos(in1[2]);
    t5 = std::sin(in1[0]);
    t6 = std::sin(in1[1]);
    t7 = std::sin(in1[2]);
    t8 = in1[1] + in1[2];
    t9 = std::cos(t8);
    t8 = std::sin(t8);
    t12 = in2[0] * t9;
    t16 = in2[2] * t8;
    t17 = in3[4] * t8;
    t22 = (t12 + t16) + -t17;
    jacobian[0] = 0.0;
    jacobian_tmp = in2[0] * t2;
    b_jacobian_tmp = in2[2] * t2;
    c_jacobian_tmp = in3[4] * t2;
    jacobian[1] = (((((((-in2[1] * t5 - in3[2] * t5) + t2 * t3 * in3[3]) +
                       jacobian_tmp * t3 * t7) + jacobian_tmp * t4 * t6) -
                     b_jacobian_tmp * t3 * t4) + b_jacobian_tmp * t6 * t7) +
                   c_jacobian_tmp * t3 * t4) - c_jacobian_tmp * t6 * t7;
    jacobian[2] = (((((((in2[1] * t2 + in3[2] * t2) + t3 * t5 * in3[3]) + in2[0] *
                                                                          t3 * t5 * t7) + in2[0] * t4 * t5 * t6) - in2[2] * t3 * t4 *
                                                                                                                   t5) + in2[2] * t5 * t6 * t7) + in3[4] * t3 * t4 * t5) - in3[4]
                                                                                                                                                                           * t5 * t6 * t7;
    jacobian_tmp = (in2[2] * t9 + -(in3[4] * t9)) + -(in2[0] * t8);
    jacobian[3] = jacobian_tmp - t3 * in3[3];
    b_jacobian_tmp = ((t6 * in3[3] - t12) - t16) + t17;
    jacobian[4] = -t5 * b_jacobian_tmp;
    jacobian[5] = t2 * b_jacobian_tmp;
    jacobian[6] = jacobian_tmp;
    jacobian[7] = t5 * t22;
    jacobian[8] = -t2 * t22;

}